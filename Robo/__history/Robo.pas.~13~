unit Robo;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, System.IOUtils;

type
  TForm1 = class(TForm)
    Button1: TButton;
    EditReplace: TEdit;
    EditNewPrefix: TEdit; // Novo TEdit para o prefixo novo
    Memo1: TMemo;
    EditUnitName: TEdit;
    EditTypeName: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel; // Novo Label para o EditNewPrefix
    procedure Button1Click(Sender: TObject);
  private
    procedure ProcessFiles(const Directory: string);
    procedure AddUnitIfNeeded(var FileContent: string);
    procedure ReplaceTextInFile(var FileContent: string);
    procedure UpdateLanguageConstFile(const FileName: string);
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.ProcessFiles(const Directory: string);
var
  Files: TArray<string>;
  FileContent, FileName: string;
  Encoding: TEncoding;
begin
  // Define a codificação ANSI
  Encoding := TEncoding.ANSI;

  // Procura todos os arquivos .pas no diretório
  Files := TDirectory.GetFiles(Directory, '*.pas', TSearchOption.soAllDirectories);

  for FileName in Files do
  begin
    // Lê o conteúdo do arquivo usando codificação ANSI
    FileContent := TFile.ReadAllText(FileName, Encoding);

    // Substitui os textos conforme o especificado nos Edits
    ReplaceTextInFile(FileContent);

    // Adiciona a unidade uLanguageConst se necessário
    AddUnitIfNeeded(FileContent);

    // Salva o conteúdo modificado no arquivo usando codificação ANSI
    TFile.WriteAllText(FileName, FileContent, Encoding);
    Memo1.Lines.Add('Arquivo processado: ' + FileName);
  end;

  ShowMessage('Processo concluído!');
end;

procedure TForm1.ReplaceTextInFile(var FileContent: string);
var
  OldText, NewText: string;
begin
  // Obtém os textos do EditReplace e EditNewPrefix
  OldText := EditReplace.Text;
  NewText := EditNewPrefix.Text;

  // Substitui o texto antigo pelo novo no conteúdo do arquivo
  FileContent := StringReplace(FileContent, OldText, NewText, [rfReplaceAll]);
end;

procedure TForm1.AddUnitIfNeeded(var FileContent: string);
const
  UnitToAdd = 'uLanguageConst';
var
  UsesPos, TypePos: Integer;
  UsesSection: string;
begin
  // Encontra a posição das seções "uses" e "type"
  UsesPos := Pos('uses', LowerCase(FileContent));
  TypePos := Pos('type', LowerCase(FileContent));

  if (UsesPos > 0) and (TypePos > UsesPos) then
  begin
    // Extrai o texto entre "uses" e "type"
    UsesSection := Copy(FileContent, UsesPos, TypePos - UsesPos);

    // Verifica se a unidade já foi adicionada (case-insensitive)
    if Pos(LowerCase(UnitToAdd), LowerCase(UsesSection)) = 0 then
    begin
      // Insere a unidade após 'uses' e quebra a linha
      Insert(Format(#13#10'  %s,'#13#10, [UnitToAdd]), FileContent, UsesPos + Length('uses'));
    end;
  end;
end;

procedure TForm1.UpdateLanguageConstFile(const FileName: string);
var
  FileContent: string;
  UsesPos, TypePos, ImplPos: Integer;
  UnitName, TypeName: string;
begin
  // Lê o conteúdo do arquivo usando codificação ANSI
  FileContent := TFile.ReadAllText(FileName, TEncoding.ANSI);

  // Obtém o nome da unidade e o nome do tipo dos Edits
  UnitName := EditUnitName.Text;
  TypeName := EditTypeName.Text;

  // Adiciona a unidade após a primeira declaração de "uses"
  UsesPos := Pos('uses', LowerCase(FileContent));
  if UsesPos > 0 then
  begin
    // Adiciona a unidade após a primeira declaração de "uses"
    Insert(Format(#13#10'  uConst.ptBR.%s,', [LowerCase(UnitName)]), FileContent, UsesPos + Length('uses'));
  end;

  // Adiciona a declaração de tipo antes da palavra-chave "implementation"
  ImplPos := Pos('implementation', LowerCase(FileContent));
  if ImplPos > 0 then
  begin
    // Adiciona o tipo antes da palavra-chave "implementation"
    Insert(Format('  TConst%s = TptBR%s;'#13#10, [TypeName, TypeName]), FileContent, ImplPos);
  end;

  // Salva o conteúdo modificado no arquivo usando codificação ANSI
  TFile.WriteAllText(FileName, FileContent, TEncoding.ANSI);

  Memo1.Lines.Add('Arquivo uLanguageConst.pas atualizado: ' + FileName);
end;

procedure TForm1.Button1Click(Sender: TObject);
var
  caminhoDiretorio, outroDiretorio, uLanguageConstFile: string;
begin
  caminhoDiretorio := 'C:\Users\matheus.silva\Documents\Projetos Zucchetti\DebxERP\Master\DebxERP\Server\Controllers';
  outroDiretorio := 'C:\Users\matheus.silva\Documents\Projetos Zucchetti\DebxERP\Master\DebxERP\Server\Models';
  uLanguageConstFile := 'C:\Users\matheus.silva\Documents\Projetos Zucchetti\DebxERP\Master\DebxERP\Server\uLanguageConst.pas';

  if DirectoryExists(caminhoDiretorio) then
    ProcessFiles(caminhoDiretorio)
  else
    ShowMessage('Diretório Controller inválido.');

  if DirectoryExists(outroDiretorio) then
    ProcessFiles(outroDiretorio)
  else
    ShowMessage('Diretório Model inválido.');

  if FileExists(uLanguageConstFile) then
    UpdateLanguageConstFile(uLanguageConstFile)
  else
    ShowMessage('Arquivo uLanguageConst.pas não encontrado.');

   EditReplace.Text := 'TptBR.';
   EditNewPrefix.Text := 'TConst';
   EditTypeName.Clear;
   EditUnitName.Text := 'c_';
end;

end.

