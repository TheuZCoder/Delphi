unit UCadItens;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.Phys.Oracle, FireDAC.Phys.OracleDef, FireDAC.VCLUI.Wait,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client;

type
  TFrmUCadItens = class(TForm)
    Panel1: TPanel;
    Panel2: TPanel;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    EDescProduto: TEdit;
    EQuantidade: TEdit;
    CBCodProd: TComboBox;
    BSalvar: TButton;
    BCancelar: TButton;
    QueryProduto: TFDQuery;
    SourceDb: TDataSource;
    QueryProdutoAux: TFDQuery;
    QueryInsertProd: TFDQuery;
    procedure CBCodProdChange(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure BCancelarClick(Sender: TObject);
    procedure BSalvarClick(Sender: TObject);
  private
    FModo: string;
  public
    property Modo: string read FModo write FModo;
  end;

var
  FrmUCadItens: TFrmUCadItens;

implementation
uses
UCadPedidos,UPesqPedidos;

{$R *.dfm}

procedure TFrmUCadItens.BCancelarClick(Sender: TObject);
begin
  Close;
end;

procedure TFrmUCadItens.BSalvarClick(Sender: TObject);
var
  codigo_produto: string;
  quantidade: Integer;
  valor_unitario: Double;
  valor_total: Double;
  id: Integer;
begin
  // Obtenha os valores dos campos
  codigo_produto := CBCodProd.Text;
  quantidade := StrToIntDef(EQuantidade.Text, 0);
  if Modo = 'Incluir' then
  begin
     with QueryProdutoAux do
    begin
    // Obtenha o valor unitário do produto
    SQL.Text := 'SELECT PdtValProd '+
                '  FROM C_Produtos '+
                ' WHERE PK_Produtos = :PK_Produtos';
    ParamByName('PK_Produtos').AsString := codigo_produto;
    Open;
    end;
    // Verifique se a consulta retornou resultados
    if not QueryProdutoAux.IsEmpty then
    begin
      valor_unitario := QueryProdutoAux.FieldByName('PdtValProd').AsFloat;

      // Calcule o valor total
      valor_total := quantidade * valor_unitario;

      try
        // Insira os dados na tabela temporária
        with QueryProdutoAux do
        begin
          SQL.Text := 'INSERT INTO T_SAVPROD ' +
                      '(PK_Produtos, ItnQtd, PdtValProd, ItnValItens) ' +
                      '     VALUES (:PK_Produtos, :ItnQtd, :PdtValProd, :ItnValItens)';

          // Defina os parâmetros
          ParamByName('PK_Produtos').AsString := codigo_produto;
          ParamByName('ItnQtd').AsInteger := quantidade;
          ParamByName('PdtValProd').AsFloat := valor_unitario;
          ParamByName('ItnValItens').AsFloat := valor_total;
          ExecSQL;
        end;

        try
        ShowMessage('Dados salvos com sucesso!');
        Close;
        except
        on E: Exception do
        ShowMessage('Erro ao salvar o item: ' + E.Message);
        end;
      except
        on E: Exception do
        begin
          // Faça rollback em caso de erro
          ShowMessage('Erro ao salvar os dados: ' + E.Message);
        end;
      end;
    end
    else
    begin
      ShowMessage('Produto não encontrado.');
    end;
  end
  else if Modo = 'Alterar' then
  begin
    // Atualizar apenas a quantidade na tabela temporária
    try
      with QueryInsertProd do
      begin
        // Obtenha o valor unitário do produto
        SQL.Text := 'SELECT PdtValProd'+
                    '  FROM C_Produtos'+
                    ' WHERE PK_Produtos = :PK_Produtos';
        ParamByName('PK_Produtos').AsString := codigo_produto;
        Open;
        valor_unitario := QueryInsertProd.FieldByName('PdtValProd').AsFloat;
      end;
      with QueryProdutoAux do
      begin
        // Calcule o valor total
        valor_total := quantidade * valor_unitario;
        SQL.Text := 'UPDATE T_SAVPROD                                         '+
                    '   SET ItnQtd = :ItnQtd,                         '+
                    '       ItnValItens = :ItnValItens                        '+
                    ' WHERE PK_Produtos = :PK_Produtos                  ';
        // Calcule o novo valor total
        valor_unitario := QueryInsertProd.FieldByName('PdtValProd').AsFloat;
        valor_total := quantidade * valor_unitario;

        // Defina os parâmetros
        ParamByName('ItnQtd').AsInteger := quantidade;
        ParamByName('ItnValItens').AsFloat := valor_total;
        ParamByName('PK_Produtos').AsString := codigo_produto;
        ExecSQL;
      end;
      ShowMessage('Quantidade atualizada com sucesso!');
      Close;
    except
      on E: Exception do
      begin
        ShowMessage('Erro ao atualizar o item: ' + E.Message);
      end;
    end;
  end;
end;

procedure TFrmUCadItens.CBCodProdChange(Sender: TObject);
begin
  try

    QueryProdutoAux.SQL.Text := 'SELECT * FROM ( '+
                                '       SELECT PdtDescProd, PdtValProd ' +
                                '         FROM C_Produtos ' +
                                '        WHERE PK_Produtos = :PK_Produtos)';
    QueryProdutoAux.ParamByName('PK_Produtos').AsString := CBCodProd.Text;
    QueryProdutoAux.Open;

    if not QueryProduto.Eof then
    begin
      QueryProduto.First;
      EDescProduto.Text := QueryProdutoAux.FieldByName('PdtDescProd').AsString;
    end
    else
    begin
      EDescProduto.Text := '';
    end;
  finally
  end;
end;



procedure TFrmUCadItens.FormCreate(Sender: TObject);
begin
  with QueryProduto do
    begin
      SQL.Text := 'SELECT * FROM ( '+
                  '       SELECT PK_Produtos, PdtDescProd '+
                  '         FROM C_Produtos)';
      Open;
    end;
   CBCodProd.Items.Clear;
  while not QueryProduto.Eof do
  begin
    CBCodProd.Items.Add(QueryProduto.FieldByName('PK_Produtos').AsString);
    QueryProduto.Next;
  end;
  QueryProduto.First;
end;

end.
