unit UCadPedidos;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.UITypes, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ComCtrls, Vcl.StdCtrls, Vcl.ExtCtrls,
  Data.DB, Vcl.Grids, Vcl.DBGrids, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.Oracle,
  FireDAC.Phys.OracleDef, FireDAC.VCLUI.Wait, FireDAC.Stan.Param, FireDAC.DatS,
  FireDAC.DApt.Intf, FireDAC.DApt, FireDAC.Comp.DataSet, FireDAC.Comp.Client, UCadItens;

type
  TFrmUCadPedidos = class(TForm)
    PanelTop: TPanel;
    Label1: TLabel;
    ECadPedido: TEdit;
    Label2: TLabel;
    DTDataPedido: TDateTimePicker;
    PanelSub: TPanel;
    Label3: TLabel;
    DBGTemporario: TDBGrid;
    PanelLow: TPanel;
    BSalvar: TButton;
    BCancelar: TButton;
    BIncluir: TButton;
    BAlterar: TButton;
    BExcluir: TButton;
    QCadPedido: TFDQuery;
    SourceDb: TDataSource;
    QCadPedidoAux: TFDQuery;
    QInsertCad: TFDQuery;
    procedure BIncluirClick(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure BSalvarClick(Sender: TObject);
    procedure BCancelarClick(Sender: TObject);
    procedure BExcluirClick(Sender: TObject);
    procedure BAlterarClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    FModo: string;
    FNumeroPedido: string;
    FDataPedido: TDateTime;
  public
    property Modo: string read FModo write FModo;
    property NumeroPedido: string read FNumeroPedido write FNumeroPedido;
    property DataPedido: TDateTime read FDataPedido write FDataPedido;
  end;

var
  FrmUCadPedidos: TFrmUCadPedidos;

implementation
uses
UPesqPedidos;

{$R *.dfm}

procedure TFrmUCadPedidos.BAlterarClick(Sender: TObject);
var
  frmCadItens: TFrmUCadItens;
  sCodProd: string;
  sQtdProd: string;
begin
 frmCadItens := TFrmUCadItens.Create(Self);
 sCodProd := DBGTemporario.DataSource.DataSet.FieldByName('PK_Produtos').AsString;
 sQtdProd := DBGTemporario.DataSource.DataSet.FieldByName('ItnQtd').AsString;
 try
  with QCadPedidoAux do
  begin
    SQL.Text := 'SELECT PdtDescProd                '+
                '  FROM C_Produtos                 '+
                ' WHERE PK_Produtos = :pPK_Produtos';
    ParamByName('pPK_Produtos').AsString := sCodProd;
    Open;
  end;
  with frmCadItens do
  begin
    CBCodProd.Text := sCodProd;
    EDescProduto.Text := QCadPedidoAux.FieldByName('PdtDescProd').AsString;
    EQuantidade.Text := sQtdProd;
    CBCodProd.Enabled := False;
    EDescProduto.Enabled := False;
    Modo := 'Alterar';
    ShowModal;
  end;

 finally
  frmCadItens.Free;
  OnActivate(Self);
 end;
end;

procedure TFrmUCadPedidos.BCancelarClick(Sender: TObject);
begin
  Close;
end;

procedure TFrmUCadPedidos.BExcluirClick(Sender: TObject);
var
  sCodProd: string;
begin
  sCodProd := QCadPedido.FieldByName('PK_Produtos').AsString;
  if sCodProd = '' then
  begin
    ShowMessage('Por favor, selecione um produto para excluir.');
    Exit;
  end;

  // Confirmar exclusão com o usuário
  if MessageDlg('Tem certeza que deseja excluir este produto?', mtConfirmation, [mbYes, mbNo], 0) = mrYes then
  begin
    try
    with QCadPedidoAux do
    begin
      // Excluir produtos associados a tabela T_SAVPROD
      SQL.Text := 'DELETE FROM T_SAVPROD                  '+
                  '      WHERE PK_Produtos = :pPK_Produtos';
      ParamByName('pPK_Produtos').AsString := sCodProd;
      ExecSQL;
    end;

      with QCadPedido do
        begin
          Refresh;
        end;

      // Informar o usuário e atualizar a visualização
      ShowMessage('Produto excluído!');
    except
      on E: Exception do
      begin
        // Desfazer transação em caso de erro
        ShowMessage('Erro ao excluir o produto: ' + E.Message);
      end;
    end;
  end;
end;

procedure TFrmUCadPedidos.BIncluirClick(Sender: TObject);
var
  frmCadItens: TFrmUCadItens;
begin
 frmCadItens := TFrmUCadItens.Create(Self);
 try
  frmCadItens.Modo := 'Incluir';
  frmCadItens.ShowModal;
 finally
  frmCadItens.Free;
  OnActivate(Self);
 end;
end;

procedure TFrmUCadPedidos.BSalvarClick(Sender: TObject);
var
  dValTotal: Double;
  iNumPed: Integer;
  dDtPed: TDateTime;
  iPkItens: Integer;
begin
  iNumPed := StrToInt(ECadPedido.Text);
  dDtPed := DTDataPedido.Date;

  if Modo = 'Incluir' then
  begin
    try
      with QInsertCad do
        begin
            // Inserir o novo pedido na tabela C_Pedidos
          SQL.Text := 'INSERT INTO C_Pedidos (PK_Pedidos, PddDatePed,'+
                      '            PddTotalPed)                      '+
                      '     VALUES (:pPK_Pedidos, :pPddDatePed,      '+
                      '            :pPddTotalPed)                    ';
          ParamByName('pPK_Pedidos').AsInteger := iNumPed;
          ParamByName('pPddDatePed').AsDate := dDtPed;
          ParamByName('pPddTotalPed').AsFloat := 0; // Valor total inicial, atualizado mais tarde
          ExecSQL;
        end;

      dValTotal := 0;
      QCadPedido.First;

      while not QCadPedido.Eof do
      begin
       with QInsertCad do
       begin
        // Obter o próximo valor da sequência para a tabela C_Itens
        SQL.Text := 'SELECT C_Itens_SEQ.NEXTVAL AS new_id FROM dual';
        Open;
        iPkItens := QInsertCad.FieldByName('new_id').AsInteger;
        Close;

        // Inserir os itens na tabela C_Itens
        SQL.Text := 'INSERT INTO C_Itens                                      '+
                    '            (PK_Itens, FK_Itens_Pedidos,                 '+
                    '            FK_Itens_Produtos, ItnQtd, ItnValItens)      '+
                    '     VALUES (:pPK_Itens, :pFK_Itens_Pedidos,             '+
                    '            :pFK_Itens_Produtos, :pItnQtd, :pItnValItens)';
        ParamByName('pPK_Itens').AsInteger := iPkItens;
        ParamByName('pFK_Itens_Pedidos').AsInteger := iNumPed;
        ParamByName('pFK_Itens_Produtos').AsString := QCadPedido.FieldByName('PK_Produtos').AsString;
        ParamByName('pItnQtd').AsInteger := QCadPedido.FieldByName('ItnQtd').AsInteger;
        ParamByName('pItnValItens').AsFloat := QCadPedido.FieldByName('PdtValProd').AsFloat * QCadPedido.FieldByName('ItnQtd').AsInteger;
        ExecSQL;

        // Atualizar o valor total do pedido
        dValTotal := dValTotal + QInsertCad.ParamByName('pItnValItens').AsFloat;

        QCadPedido.Next;

       end;

      end;

      with QCadPedidoAux do
      begin
         // Atualizar o valor total do pedido na tabela C_Pedidos
      SQL.Text := 'UPDATE C_Pedidos                  '+
                  '   SET PddTotalPed = :pPddTotalPed'+
                  ' WHERE PK_Pedidos = :pPK_Pedidos  ';
      ParamByName('pPddTotalPed').AsFloat := dValTotal;
      ParamByName('pPK_Pedidos').AsInteger := iNumPed;
      ExecSQL;

      // Deletar todos os itens da tabela temporária T_SavProd
      SQL.Text := 'DELETE FROM T_SavProd';
      ExecSQL;
      end;

      with FrmUPesqPedidos do
      begin
        QDb.Refresh;
        QTabelaAux.Refresh;
      end;

      ShowMessage('Pedido salvo com sucesso!');
      Close;

    except
      on E: Exception do
      begin
        // Desfazer transação em caso de erro
        FrmUPesqPedidos.ConnectDb.Rollback;
        ShowMessage('Erro ao salvar o pedido: ' + E.Message);
      end;
    end;
  end
  else if Modo = 'Alterar' then
  begin
    try
      dValTotal := 0;
      QCadPedido.First;

      // Atualizar itens existentes e adicionar novos
      while not QCadPedido.Eof do
      begin
        with QCadPedidoAux do
         begin
          SQL.Text := 'SELECT COUNT(*)                               '+
                      '    AS item_count                             '+
                      '  FROM C_Itens                                '+
                      ' WHERE FK_Itens_Pedidos = :pFK_Itens_Pedidos  '+
                      '   AND FK_Itens_Produtos = :pFK_Itens_Produtos';
          ParamByName('pFK_Itens_Pedidos').AsInteger := iNumPed;
          ParamByName('pFK_Itens_Produtos').AsString := QCadPedido.FieldByName('PK_Produtos').AsString;
          Open;
         end;


        if QCadPedidoAux.FieldByName('item_count').AsInteger = 0 then
        begin
          with QInsertCad do
           begin
            SQL.Text := 'SELECT C_Itens_SEQ.NEXTVAL AS new_id FROM dual';
            Open;
            iPkItens := QInsertCad.FieldByName('new_id').AsInteger;
            Close;
            // Inserir novo item
            SQL.Text := 'INSERT INTO C_Itens                                  '+
                        '            (PK_Itens, FK_Itens_Pedidos,             '+
                        '            FK_Itens_Produtos,ItnQtd,                '+
                        '            ItnValItens)                             '+
                        '     VALUES (:pPK_Itens, :pFK_Itens_Pedidos,         '+
                        '            :pFK_Itens_Produtos, :pItnQtd,           '+
                        '            :pItnValItens)                           ';
            ParamByName('pPK_Itens').AsInteger := iPkItens;
            ParamByName('pFK_Itens_Pedidos').AsInteger := iNumPed;
            ParamByName('pFK_Itens_Produtos').AsString := QCadPedido.FieldByName('PK_Produtos').AsString;
            ParamByName('pItnQtd').AsInteger := QCadPedido.FieldByName('ItnQtd').AsInteger;
            ParamByName('pItnValItens').AsFloat := QCadPedido.FieldByName('PdtValProd').AsFloat * QCadPedido.FieldByName('ItnQtd').AsInteger;
            ExecSQL;
           end;

        end
        else
        begin
          with QCadPedidoAux do
           begin
           // Atualizar item existente
            SQL.Text := 'UPDATE C_Itens                                       '+
                        '   SET ItnQtd = :pItnQtd, ItnValItens = :pItnValItens'+
                        ' WHERE FK_Itens_Pedidos = :pFK_Itens_Pedidos         '+
                        '   AND FK_Itens_Produtos = :pFK_Itens_Produtos       ';
            ParamByName('pItnQtd').AsInteger := QCadPedido.FieldByName('ItnQtd').AsInteger;
            ParamByName('pItnValItens').AsFloat := QCadPedido.FieldByName('PdtValProd').AsFloat * QCadPedido.FieldByName('ItnQtd').AsInteger;
            ParamByName('pFK_Itens_Pedidos').AsInteger := iNumPed;
            ParamByName('pFK_Itens_Produtos').AsString := QCadPedido.FieldByName('PK_Produtos').AsString;
            ExecSQL;
           end;

        end;

        dValTotal := dValTotal + QCadPedido.FieldByName('ItnValItens').AsFloat;
        QCadPedido.Next;
      end;

      with QCadPedidoAux do
       begin

        // Remover itens que não estão mais na tabela temporária
        SQL.Text := 'DELETE FROM C_Itens                               '+
                    '      WHERE FK_Itens_Pedidos = :pFK_Itens_Pedidos '+
                    '        AND FK_Itens_Produtos                     '+
                    '     NOT IN                                       '+
                    '    (SELECT PK_Produtos                           '+
                    '       FROM T_SavProd                             '+
                    '      WHERE FK_Itens_Pedidos = :pFK_Itens_Pedidos)';
        ParamByName('pFK_Itens_Pedidos').AsInteger := iNumPed;
        ExecSQL;

        // Atualizar o valor total do pedido na tabela C_Pedidos
        SQL.Text := 'UPDATE C_Pedidos                  '+
                    '   SET PddDatePed = :pPddDatePed, '+
                    '       PddTotalPed = :pPddTotalPed'+
                    ' WHERE PK_Pedidos = :pPK_Pedidos  ';
        ParamByName('pPddDatePed').AsDate := dDtPed;
        ParamByName('pPddTotalPed').AsFloat := dValTotal;
        ParamByName('pPK_Pedidos').AsInteger := iNumPed;
        ExecSQL;

        // Deletar todos os itens da tabela temporária T_SavProd
        SQL.Text := 'DELETE FROM T_SavProd';
        ExecSQL;
       end;

      // Confirmar transação
      with FrmUPesqPedidos do
      begin
        ConnectDb.Commit;
        QDb.Refresh;
        QTabelaAux.Refresh;
      end;

      ShowMessage('Pedido alterado com sucesso!');
      Close;
    except
      on E: Exception do
      begin
        // Desfazer transação em caso de erro
        FrmUPesqPedidos.ConnectDb.Rollback;
        ShowMessage('Erro ao alterar o pedido: ' + E.Message);
      end;
    end;
  end;
end;


procedure TFrmUCadPedidos.FormActivate(Sender: TObject);
begin
    if QCadPedido.Active then
      QCadPedido.Refresh
    else
      with  QCadPedido do
      begin
        SQL.Text := 'SELECT * FROM (           '+
                    '       SELECT *           '+
                    '         FROM T_SAVPROD   '+
                    '     ORDER BY PK_Produtos)';
        Open;
      end;

end;
procedure TFrmUCadPedidos.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  FrmUPesqPedidos.QDb.Refresh;
  QCadPedidoAux.SQL.Text := 'DELETE FROM T_SavProd';
  QCadPedidoAux.ExecSQL;
end;

end.
